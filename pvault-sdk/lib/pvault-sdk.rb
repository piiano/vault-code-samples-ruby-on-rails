=begin
#Piiano Vault REST API

#--- sidebar_position: 1 sidebar_label: Overview description: The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault. slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

# Common files
require 'pvault-sdk/api_client'
require 'pvault-sdk/api_error'
require 'pvault-sdk/version'
require 'pvault-sdk/configuration'

# Models
require 'pvault-sdk/models/api_key'
require 'pvault-sdk/models/all_generations'
require 'pvault-sdk/models/auth_config'
require 'pvault-sdk/models/auth_policy'
require 'pvault-sdk/models/auth_role'
require 'pvault-sdk/models/auth_user'
require 'pvault-sdk/models/bulk_object_response'
require 'pvault-sdk/models/bulk_object_result'
require 'pvault-sdk/models/collection'
require 'pvault-sdk/models/conf_var'
require 'pvault-sdk/models/conf_var_value'
require 'pvault-sdk/models/config_config'
require 'pvault-sdk/models/config_db'
require 'pvault-sdk/models/config_expiration'
require 'pvault-sdk/models/config_features'
require 'pvault-sdk/models/config_gc'
require 'pvault-sdk/models/config_kms'
require 'pvault-sdk/models/config_log'
require 'pvault-sdk/models/config_migration'
require 'pvault-sdk/models/config_sentry'
require 'pvault-sdk/models/config_service'
require 'pvault-sdk/models/config_tls'
require 'pvault-sdk/models/detokenized_token'
require 'pvault-sdk/models/gc_deletion_count'
require 'pvault-sdk/models/hash_object_request'
require 'pvault-sdk/models/health'
require 'pvault-sdk/models/input_object'
require 'pvault-sdk/models/kms_status'
require 'pvault-sdk/models/license'
require 'pvault-sdk/models/object'
require 'pvault-sdk/models/object_fields_page'
require 'pvault-sdk/models/object_id'
require 'pvault-sdk/models/pii_type'
require 'pvault-sdk/models/paging'
require 'pvault-sdk/models/product_version'
require 'pvault-sdk/models/property'
require 'pvault-sdk/models/query'
require 'pvault-sdk/models/query_token'
require 'pvault-sdk/models/rest_http_error'
require 'pvault-sdk/models/token_aggregated_metadata'
require 'pvault-sdk/models/token_metadata'
require 'pvault-sdk/models/token_ref_metadata'
require 'pvault-sdk/models/token_type'
require 'pvault-sdk/models/token_value'
require 'pvault-sdk/models/tokenize_request'
require 'pvault-sdk/models/transformation'
require 'pvault-sdk/models/update_token_request'
require 'pvault-sdk/models/user_name'
require 'pvault-sdk/models/vault_generation'
require 'pvault-sdk/models/worker'

# APIs
require 'pvault-sdk/api/collection_properties_api'
require 'pvault-sdk/api/collections_api'
require 'pvault-sdk/api/config_vars_api'
require 'pvault-sdk/api/data_types_and_transformations_api'
require 'pvault-sdk/api/iam_api'
require 'pvault-sdk/api/objects_api'
require 'pvault-sdk/api/system_api'
require 'pvault-sdk/api/tokens_api'

module PvaultSdk
  class << self
    # Customize default settings for the SDK using block.
    #   PvaultSdk.configure do |config|
    #     config.username = "xxx"
    #     config.password = "xxx"
    #   end
    # If no block given, return the default Configuration object.
    def configure
      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end
  end
end
