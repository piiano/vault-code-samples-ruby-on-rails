=begin
#Piiano Vault REST API

#--- sidebar_position: 1 sidebar_label: Overview description: The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault. slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'cgi'

module PvaultSdk
  class CollectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add collection
    # Adds a collection.  The collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  Invalid optional `properties` attributes in a JSON request are ignored.  The role performing this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [Collection] Details of the collection including its properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Collection]
    def add_collection(collection, opts = {})
      data, _status_code, _headers = add_collection_with_http_info(collection, opts)
      data
    end

    # Add collection
    # Adds a collection.  The collection request can be provided in JSON or PVSchema format by setting the &#x60;Content-Type&#x60; header to &#x60;application/json&#x60; or &#x60;application/pvschema&#x60;, respectively. The collection can be returned in JSON or PVSchema format using the &#x60;format&#x60; query parameter or by setting the &#x60;Accept&#x60; header to &#x60;application/json&#x60; or &#x60;application/pvschema&#x60;, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  Invalid optional &#x60;properties&#x60; attributes in a JSON request are ignored.  The role performing this operation must have the &#x60;CapCollectionsWriter&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [Collection] Details of the collection including its properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Array<(Collection, Integer, Hash)>] Collection data, response status code and response headers
    def add_collection_with_http_info(collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.add_collection ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionsApi.add_collection"
      end
      allowable_values = ["pvschema", "json"]
      if @api_client.config.client_side_validation && opts[:'format'] && !allowable_values.include?(opts[:'format'])
        fail ArgumentError, "invalid value for \"format\", must be one of #{allowable_values}"
      end
      allowable_values = ["show_builtins"]
      if @api_client.config.client_side_validation && opts[:'options'] && !opts[:'options'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"options\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'options'] = @api_client.build_collection_param(opts[:'options'], :multi) if !opts[:'options'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pvschema'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/pvschema'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(collection)

      # return_type
      return_type = opts[:debug_return_type] || 'Collection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionsApi.add_collection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#add_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete collection
    # Deletes a collection.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_collection(collection, opts = {})
      delete_collection_with_http_info(collection, opts)
      nil
    end

    # Delete collection
    # Deletes a collection.  The role that performs this operation must have the &#x60;CapCollectionsWriter&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_collection_with_http_info(collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.delete_collection ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionsApi.delete_collection"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionsApi.delete_collection, must conform to the pattern #{pattern}."
      end

      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionsApi.delete_collection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#delete_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get collection
    # Gets a collection and its properties.  The collection details can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
    # @param collection [String] The name of the collection.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Collection]
    def get_collection(collection, opts = {})
      data, _status_code, _headers = get_collection_with_http_info(collection, opts)
      data
    end

    # Get collection
    # Gets a collection and its properties.  The collection details can be returned in JSON or PVSchema format using the &#x60;format&#x60; query parameter or by setting the &#x60;Accept&#x60; header to &#x60;application/json&#x60; or &#x60;application/pvschema&#x60;, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The role that performs this operation must have the &#x60;CapCollectionsReader&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
    # @param collection [String] The name of the collection.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Array<(Collection, Integer, Hash)>] Collection data, response status code and response headers
    def get_collection_with_http_info(collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.get_collection ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionsApi.get_collection"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionsApi.get_collection, must conform to the pattern #{pattern}."
      end

      allowable_values = ["pvschema", "json"]
      if @api_client.config.client_side_validation && opts[:'format'] && !allowable_values.include?(opts[:'format'])
        fail ArgumentError, "invalid value for \"format\", must be one of #{allowable_values}"
      end
      allowable_values = ["show_builtins"]
      if @api_client.config.client_side_validation && opts[:'options'] && !opts[:'options'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"options\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'options'] = @api_client.build_collection_param(opts[:'options'], :multi) if !opts[:'options'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pvschema'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Collection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionsApi.get_collection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#get_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List collections
    # Lists all collections.  The collections can be returned in JSON or PVSchema format using the `format` query parameter or by setting the `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The PVSchema format for multiple collections is the PVSchema for each collection string concatenated with a newline.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Array<Collection>]
    def list_collections(opts = {})
      data, _status_code, _headers = list_collections_with_http_info(opts)
      data
    end

    # List collections
    # Lists all collections.  The collections can be returned in JSON or PVSchema format using the &#x60;format&#x60; query parameter or by setting the &#x60;Accept&#x60; header to &#x60;application/json&#x60; or &#x60;application/pvschema&#x60;, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The PVSchema format for multiple collections is the PVSchema for each collection string concatenated with a newline.  The role that performs this operation must have the &#x60;CapCollectionsReader&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Array<(Array<Collection>, Integer, Hash)>] Array<Collection> data, response status code and response headers
    def list_collections_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.list_collections ...'
      end
      allowable_values = ["pvschema", "json"]
      if @api_client.config.client_side_validation && opts[:'format'] && !allowable_values.include?(opts[:'format'])
        fail ArgumentError, "invalid value for \"format\", must be one of #{allowable_values}"
      end
      allowable_values = ["show_builtins"]
      if @api_client.config.client_side_validation && opts[:'options'] && !opts[:'options'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"options\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'options'] = @api_client.build_collection_param(opts[:'options'], :multi) if !opts[:'options'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pvschema'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Collection>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionsApi.list_collections",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#list_collections\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update collection
    # Adds properties to a collection.  The collection request can be provided in JSON or PVSchema format by setting the `Content-Type` header to `application/json` or `application/pvschema`, respectively. The collection can be returned in JSON or PVSchema format using the `format` query parameter or by setting  the  `Accept` header to `application/json` or `application/pvschema`, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The collection name provided in the path parameter must match the collection name in the JSON or PVSchema.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
    # @param collection [String] The name of the collection.
    # @param collection2 [Collection] Details of the collection, including its properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Collection]
    def update_collection(collection, collection2, opts = {})
      data, _status_code, _headers = update_collection_with_http_info(collection, collection2, opts)
      data
    end

    # Update collection
    # Adds properties to a collection.  The collection request can be provided in JSON or PVSchema format by setting the &#x60;Content-Type&#x60; header to &#x60;application/json&#x60; or &#x60;application/pvschema&#x60;, respectively. The collection can be returned in JSON or PVSchema format using the &#x60;format&#x60; query parameter or by setting  the  &#x60;Accept&#x60; header to &#x60;application/json&#x60; or &#x60;application/pvschema&#x60;, respectively. The default is to return JSON.  See [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) for more details on the structure and content of PVSchema.  The collection name provided in the path parameter must match the collection name in the JSON or PVSchema.  The role that performs this operation must have the &#x60;CapCollectionsWriter&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations. 
    # @param collection [String] The name of the collection.
    # @param collection2 [Collection] Details of the collection, including its properties.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :format The format of the response. Overrides any &#x60;Accept&#x60; header value provided. (default to 'json')
    # @option opts [Array<String>] :options Options for the operation. Options include: - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Array<(Collection, Integer, Hash)>] Collection data, response status code and response headers
    def update_collection_with_http_info(collection, collection2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.update_collection ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionsApi.update_collection"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionsApi.update_collection, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'collection2' is set
      if @api_client.config.client_side_validation && collection2.nil?
        fail ArgumentError, "Missing the required parameter 'collection2' when calling CollectionsApi.update_collection"
      end
      allowable_values = ["pvschema", "json"]
      if @api_client.config.client_side_validation && opts[:'format'] && !allowable_values.include?(opts[:'format'])
        fail ArgumentError, "invalid value for \"format\", must be one of #{allowable_values}"
      end
      allowable_values = ["show_builtins"]
      if @api_client.config.client_side_validation && opts[:'options'] && !opts[:'options'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"options\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'options'] = @api_client.build_collection_param(opts[:'options'], :multi) if !opts[:'options'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'application/pvschema'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json', 'application/pvschema'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(collection2)

      # return_type
      return_type = opts[:debug_return_type] || 'Collection'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionsApi.update_collection",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#update_collection\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
