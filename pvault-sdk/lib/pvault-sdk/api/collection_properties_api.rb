=begin
#Piiano Vault REST API

#--- sidebar_position: 1 sidebar_label: Overview description: The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault. slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'cgi'

module PvaultSdk
  class CollectionPropertiesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add collection property
    # Adds a property to a collection.  The property name provided in the `property` parameter and request body must match. When the collection contains objects, only nullable properties can be added to the collection.  The role performing this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection to add the property to.
    # @param property [String] The name of the property to add.
    # @param property2 [Property] Details of the property.
    # @param [Hash] opts the optional parameters
    # @return [Property]
    def add_collection_property(collection, property, property2, opts = {})
      data, _status_code, _headers = add_collection_property_with_http_info(collection, property, property2, opts)
      data
    end

    # Add collection property
    # Adds a property to a collection.  The property name provided in the &#x60;property&#x60; parameter and request body must match. When the collection contains objects, only nullable properties can be added to the collection.  The role performing this operation must have the &#x60;CapCollectionsWriter&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection to add the property to.
    # @param property [String] The name of the property to add.
    # @param property2 [Property] Details of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Property, Integer, Hash)>] Property data, response status code and response headers
    def add_collection_property_with_http_info(collection, property, property2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionPropertiesApi.add_collection_property ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionPropertiesApi.add_collection_property"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionPropertiesApi.add_collection_property, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'property' is set
      if @api_client.config.client_side_validation && property.nil?
        fail ArgumentError, "Missing the required parameter 'property' when calling CollectionPropertiesApi.add_collection_property"
      end
      # verify the required parameter 'property2' is set
      if @api_client.config.client_side_validation && property2.nil?
        fail ArgumentError, "Missing the required parameter 'property2' when calling CollectionPropertiesApi.add_collection_property"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s)).sub('{' + 'property' + '}', CGI.escape(property.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(property2)

      # return_type
      return_type = opts[:debug_return_type] || 'Property'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionPropertiesApi.add_collection_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionPropertiesApi#add_collection_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete collection property
    # Deletes a property from a collection.  Any values stored against the property in objects are also deleted. This operation is irreversible.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the property.
    # @param property [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_collection_property(collection, property, opts = {})
      delete_collection_property_with_http_info(collection, property, opts)
      nil
    end

    # Delete collection property
    # Deletes a property from a collection.  Any values stored against the property in objects are also deleted. This operation is irreversible.  The role that performs this operation must have the &#x60;CapCollectionsWriter&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the property.
    # @param property [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_collection_property_with_http_info(collection, property, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionPropertiesApi.delete_collection_property ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionPropertiesApi.delete_collection_property"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionPropertiesApi.delete_collection_property, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'property' is set
      if @api_client.config.client_side_validation && property.nil?
        fail ArgumentError, "Missing the required parameter 'property' when calling CollectionPropertiesApi.delete_collection_property"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s)).sub('{' + 'property' + '}', CGI.escape(property.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionPropertiesApi.delete_collection_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionPropertiesApi#delete_collection_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get collection property
    # Gets a property of a collection.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the property.
    # @param property [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Property]
    def get_collection_property(collection, property, opts = {})
      data, _status_code, _headers = get_collection_property_with_http_info(collection, property, opts)
      data
    end

    # Get collection property
    # Gets a property of a collection.  The role that performs this operation must have the &#x60;CapCollectionsReader&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the property.
    # @param property [String] The name of the property.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Property, Integer, Hash)>] Property data, response status code and response headers
    def get_collection_property_with_http_info(collection, property, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionPropertiesApi.get_collection_property ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionPropertiesApi.get_collection_property"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionPropertiesApi.get_collection_property, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'property' is set
      if @api_client.config.client_side_validation && property.nil?
        fail ArgumentError, "Missing the required parameter 'property' when calling CollectionPropertiesApi.get_collection_property"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s)).sub('{' + 'property' + '}', CGI.escape(property.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Property'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionPropertiesApi.get_collection_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionPropertiesApi#get_collection_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List collection properties
    # Lists the properties of a collection.  The role that performs this operation must have the `CapCollectionsReader` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the properties.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :options Options for the operation. Options include:  - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Array<Property>]
    def list_collection_properties(collection, opts = {})
      data, _status_code, _headers = list_collection_properties_with_http_info(collection, opts)
      data
    end

    # List collection properties
    # Lists the properties of a collection.  The role that performs this operation must have the &#x60;CapCollectionsReader&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the properties.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :options Options for the operation. Options include:  - &#x60;show_builtins&#x60; – show built-in properties in the response. 
    # @return [Array<(Array<Property>, Integer, Hash)>] Array<Property> data, response status code and response headers
    def list_collection_properties_with_http_info(collection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionPropertiesApi.list_collection_properties ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionPropertiesApi.list_collection_properties"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionPropertiesApi.list_collection_properties, must conform to the pattern #{pattern}."
      end

      allowable_values = ["show_builtins"]
      if @api_client.config.client_side_validation && opts[:'options'] && !opts[:'options'].all? { |item| allowable_values.include?(item) }
        fail ArgumentError, "invalid value for \"options\", must include one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}/properties'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'options'] = @api_client.build_collection_param(opts[:'options'], :multi) if !opts[:'options'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Property>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionPropertiesApi.list_collection_properties",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionPropertiesApi#list_collection_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update collection property
    # ** Not implemented **  Updates a property of a collection. Properties with values on objects in the collection cannot be updated. Any property not included in the request is replaced with its default values.  The role that performs this operation must have the `CapCollectionsWriter` capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the property.
    # @param property [String] The name of the property.
    # @param property2 [Property] property info
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def update_collection_property(collection, property, property2, opts = {})
      update_collection_property_with_http_info(collection, property, property2, opts)
      nil
    end

    # Update collection property
    # ** Not implemented **  Updates a property of a collection. Properties with values on objects in the collection cannot be updated. Any property not included in the request is replaced with its default values.  The role that performs this operation must have the &#x60;CapCollectionsWriter&#x60; capability. See [Access control](/data-security/identity-and-access-management#access-control) for more information about how capabilities are used to control access to operations.
    # @param collection [String] The name of the collection containing the property.
    # @param property [String] The name of the property.
    # @param property2 [Property] property info
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_collection_property_with_http_info(collection, property, property2, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionPropertiesApi.update_collection_property ...'
      end
      # verify the required parameter 'collection' is set
      if @api_client.config.client_side_validation && collection.nil?
        fail ArgumentError, "Missing the required parameter 'collection' when calling CollectionPropertiesApi.update_collection_property"
      end
      pattern = Regexp.new(/^[a-zA-Z][a-zA-Z0-9_]*$/)
      if @api_client.config.client_side_validation && collection !~ pattern
        fail ArgumentError, "invalid value for 'collection' when calling CollectionPropertiesApi.update_collection_property, must conform to the pattern #{pattern}."
      end

      # verify the required parameter 'property' is set
      if @api_client.config.client_side_validation && property.nil?
        fail ArgumentError, "Missing the required parameter 'property' when calling CollectionPropertiesApi.update_collection_property"
      end
      # verify the required parameter 'property2' is set
      if @api_client.config.client_side_validation && property2.nil?
        fail ArgumentError, "Missing the required parameter 'property2' when calling CollectionPropertiesApi.update_collection_property"
      end
      # resource path
      local_var_path = '/api/pvlt/1.0/ctl/collections/{collection}/properties/{property}'.sub('{' + 'collection' + '}', CGI.escape(collection.to_s)).sub('{' + 'property' + '}', CGI.escape(property.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(property2)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || ['bearerAuth']

      new_options = opts.merge(
        :operation => :"CollectionPropertiesApi.update_collection_property",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionPropertiesApi#update_collection_property\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
