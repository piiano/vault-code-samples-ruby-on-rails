=begin
#Piiano Vault REST API

#--- sidebar_position: 1 sidebar_label: Overview description: The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault. slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'date'
require 'time'

module PvaultSdk
  class TokenizeRequest
    # Properties used by the format preserving template for the ID generation. The templates require these properties: - the `primary_account_number` template requires a property of type `CC_NUMBER`. The token ID is generated from this property by retaining the first six and last four digits and randomizing the remaining digits. 
    attr_accessor :fpprops

    # The template used to format the generated ID. Supports:  - `primary_account_number` that generates an ID that is a valid 16-digit PAN (credit card number). If empty, the format of the ID is a UUID. 
    attr_accessor :fptemplate

    # A list of object IDs to create tokens for.
    attr_accessor :object_ids

    # A list of the properties to tokenize.
    attr_accessor :props

    # Whether to reuse token IDs.  - When set to true, check and return an existing token in the same collection if one exists and satisfies these conditions: it is a reusable token, it was created with the same values and the same scopes.  - When set to false, or when the aforementioned token is not found, create a new reusable token.  Applies only to `VALUE` tokens. 
    attr_accessor :reuse_token_id

    # Whether the tokens can be detokenized.
    attr_accessor :reversible

    # A classification for the tokens.
    attr_accessor :scope

    # Tags to attach to the tokens. Maximum 10. 
    attr_accessor :tags

    # The type of tokens to create: - `VALUE` for tokens that represent the property values as they were when the token was created. - `POINTER` for tokens that represent the property values as they are when the request to detokenize is made. 
    attr_accessor :type

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'fpprops' => :'fpprops',
        :'fptemplate' => :'fptemplate',
        :'object_ids' => :'object_ids',
        :'props' => :'props',
        :'reuse_token_id' => :'reuse_token_id',
        :'reversible' => :'reversible',
        :'scope' => :'scope',
        :'tags' => :'tags',
        :'type' => :'type'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'fpprops' => :'Array<String>',
        :'fptemplate' => :'String',
        :'object_ids' => :'Array<String>',
        :'props' => :'Array<String>',
        :'reuse_token_id' => :'Boolean',
        :'reversible' => :'Boolean',
        :'scope' => :'String',
        :'tags' => :'Array<String>',
        :'type' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PvaultSdk::TokenizeRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PvaultSdk::TokenizeRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'fpprops')
        if (value = attributes[:'fpprops']).is_a?(Array)
          self.fpprops = value
        end
      end

      if attributes.key?(:'fptemplate')
        self.fptemplate = attributes[:'fptemplate']
      end

      if attributes.key?(:'object_ids')
        if (value = attributes[:'object_ids']).is_a?(Array)
          self.object_ids = value
        end
      end

      if attributes.key?(:'props')
        if (value = attributes[:'props']).is_a?(Array)
          self.props = value
        end
      end

      if attributes.key?(:'reuse_token_id')
        self.reuse_token_id = attributes[:'reuse_token_id']
      else
        self.reuse_token_id = false
      end

      if attributes.key?(:'reversible')
        self.reversible = attributes[:'reversible']
      else
        self.reversible = true
      end

      if attributes.key?(:'scope')
        self.scope = attributes[:'scope']
      else
        self.scope = 'default'
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @object_ids.nil?
        invalid_properties.push('invalid value for "object_ids", object_ids cannot be nil.')
      end

      if @props.nil?
        invalid_properties.push('invalid value for "props", props cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      fptemplate_validator = EnumAttributeValidator.new('String', ["primary_account_number"])
      return false unless fptemplate_validator.valid?(@fptemplate)
      return false if @object_ids.nil?
      return false if @props.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["POINTER", "VALUE"])
      return false unless type_validator.valid?(@type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] fptemplate Object to be assigned
    def fptemplate=(fptemplate)
      validator = EnumAttributeValidator.new('String', ["primary_account_number"])
      unless validator.valid?(fptemplate)
        fail ArgumentError, "invalid value for \"fptemplate\", must be one of #{validator.allowable_values}."
      end
      @fptemplate = fptemplate
    end

    # Custom attribute writer method with validation
    # @param [Object] tags Value to be assigned
    def tags=(tags)
      @tags = tags
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["POINTER", "VALUE"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          fpprops == o.fpprops &&
          fptemplate == o.fptemplate &&
          object_ids == o.object_ids &&
          props == o.props &&
          reuse_token_id == o.reuse_token_id &&
          reversible == o.reversible &&
          scope == o.scope &&
          tags == o.tags &&
          type == o.type
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [fpprops, fptemplate, object_ids, props, reuse_token_id, reversible, scope, tags, type].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PvaultSdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
