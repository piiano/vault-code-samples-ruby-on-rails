=begin
#Piiano Vault REST API

#--- sidebar_position: 1 sidebar_label: Overview description: The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault. slug: / ---  # Introduction  The Piiano Vault REST API enables you to access and manage collections, objects, tokens, users, policies, and other resources within Piiano Vault in a simple, programmatic way using conventional HTTP requests and standard HTTP response codes.  The API follows RESTful conventions when possible, with most operations performed by `GET`, `POST`, `PUT`, `PATCH`, and `DELETE` requests. Request and response bodies are [JSON-encoded](https://www.json.org/json-en.html). However, for collection operations, an SQL-like [PVSchema](/guides/manage-collections-and-schemas/reference/pvschema) encoding is available.  This API reference provides details for each operation available in the API.  When you install a local copy of Vault, you can try each operation using **Send API request**.  An OpenAPI specification is available in [YAML](@site/static/assets/openapi.yaml) and [JSON](@site/static/assets/openapi.json) formats and can be used to generate client code for the API. 

The version of the OpenAPI document: 1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.3.0-SNAPSHOT

=end

require 'date'
require 'time'

module PvaultSdk
  class ConfigDB
    attr_accessor :conn_max_lifetime_minutes

    attr_accessor :gc

    attr_accessor :hostname

    attr_accessor :max_idle_conns

    attr_accessor :max_open_conns

    attr_accessor :max_string_length

    attr_accessor :max_blob_length

    attr_accessor :migration

    attr_accessor :name

    attr_accessor :password

    attr_accessor :port

    attr_accessor :require_tls

    attr_accessor :user

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'conn_max_lifetime_minutes' => :'conn_max_lifetime_minutes',
        :'gc' => :'gc',
        :'hostname' => :'hostname',
        :'max_idle_conns' => :'max_idle_conns',
        :'max_open_conns' => :'max_open_conns',
        :'max_string_length' => :'max_string_length',
        :'max_blob_length' => :'max_blob_length',
        :'migration' => :'migration',
        :'name' => :'name',
        :'password' => :'password',
        :'port' => :'port',
        :'require_tls' => :'require_tls',
        :'user' => :'user'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'conn_max_lifetime_minutes' => :'Integer',
        :'gc' => :'ConfigGC',
        :'hostname' => :'String',
        :'max_idle_conns' => :'Integer',
        :'max_open_conns' => :'Integer',
        :'max_string_length' => :'Integer',
        :'max_blob_length' => :'Integer',
        :'migration' => :'ConfigMigration',
        :'name' => :'String',
        :'password' => :'String',
        :'port' => :'Integer',
        :'require_tls' => :'Boolean',
        :'user' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `PvaultSdk::ConfigDB` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `PvaultSdk::ConfigDB`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'conn_max_lifetime_minutes')
        self.conn_max_lifetime_minutes = attributes[:'conn_max_lifetime_minutes']
      end

      if attributes.key?(:'gc')
        self.gc = attributes[:'gc']
      end

      if attributes.key?(:'hostname')
        self.hostname = attributes[:'hostname']
      end

      if attributes.key?(:'max_idle_conns')
        self.max_idle_conns = attributes[:'max_idle_conns']
      end

      if attributes.key?(:'max_open_conns')
        self.max_open_conns = attributes[:'max_open_conns']
      end

      if attributes.key?(:'max_string_length')
        self.max_string_length = attributes[:'max_string_length']
      end

      if attributes.key?(:'max_blob_length')
        self.max_blob_length = attributes[:'max_blob_length']
      end

      if attributes.key?(:'migration')
        self.migration = attributes[:'migration']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'port')
        self.port = attributes[:'port']
      end

      if attributes.key?(:'require_tls')
        self.require_tls = attributes[:'require_tls']
      end

      if attributes.key?(:'user')
        self.user = attributes[:'user']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @conn_max_lifetime_minutes.nil?
        invalid_properties.push('invalid value for "conn_max_lifetime_minutes", conn_max_lifetime_minutes cannot be nil.')
      end

      if @gc.nil?
        invalid_properties.push('invalid value for "gc", gc cannot be nil.')
      end

      if @hostname.nil?
        invalid_properties.push('invalid value for "hostname", hostname cannot be nil.')
      end

      if @max_idle_conns.nil?
        invalid_properties.push('invalid value for "max_idle_conns", max_idle_conns cannot be nil.')
      end

      if @max_open_conns.nil?
        invalid_properties.push('invalid value for "max_open_conns", max_open_conns cannot be nil.')
      end

      if @migration.nil?
        invalid_properties.push('invalid value for "migration", migration cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @password.nil?
        invalid_properties.push('invalid value for "password", password cannot be nil.')
      end

      if @port.nil?
        invalid_properties.push('invalid value for "port", port cannot be nil.')
      end

      if @require_tls.nil?
        invalid_properties.push('invalid value for "require_tls", require_tls cannot be nil.')
      end

      if @user.nil?
        invalid_properties.push('invalid value for "user", user cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @conn_max_lifetime_minutes.nil?
      return false if @gc.nil?
      return false if @hostname.nil?
      return false if @max_idle_conns.nil?
      return false if @max_open_conns.nil?
      return false if @migration.nil?
      return false if @name.nil?
      return false if @password.nil?
      return false if @port.nil?
      return false if @require_tls.nil?
      return false if @user.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          conn_max_lifetime_minutes == o.conn_max_lifetime_minutes &&
          gc == o.gc &&
          hostname == o.hostname &&
          max_idle_conns == o.max_idle_conns &&
          max_open_conns == o.max_open_conns &&
          max_string_length == o.max_string_length &&
          max_blob_length == o.max_blob_length &&
          migration == o.migration &&
          name == o.name &&
          password == o.password &&
          port == o.port &&
          require_tls == o.require_tls &&
          user == o.user
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [conn_max_lifetime_minutes, gc, hostname, max_idle_conns, max_open_conns, max_string_length, max_blob_length, migration, name, password, port, require_tls, user].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = PvaultSdk.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
